import java.io.IOException;
import java.nio.file.Paths;
import org.jsfml.graphics.CircleShape;
import org.jsfml.graphics.Color;
import org.jsfml.graphics.Font;
import org.jsfml.graphics.RectangleShape;
import org.jsfml.graphics.RenderWindow;
import org.jsfml.graphics.Text;
import org.jsfml.graphics.TextStyle;
import org.jsfml.system.Vector2f;
import org.jsfml.window.Keyboard;
import org.jsfml.window.Keyboard.Key;
import org.jsfml.window.VideoMode;
import org.jsfml.window.event.Event;

public class Main
{
	//initializing public variables
	public static RenderWindow window = new RenderWindow();
	public static boolean left=true, right=false, up=true, down=false;
	public static int width=800, height=600;
	public static int p1_score=0, p2_score=0;
	
	//main method
	public static void main(String args[])
	{
		//instantiating window
		window.create(new VideoMode(width, height), "Pong");

		//instantiating p1
		int p1speed = 10;
		RectangleShape p1 = new RectangleShape(new Vector2f(20, 100));
		p1.setPosition(0, (height/2)-(p1.getSize().y/2));
		p1.setFillColor(Color.WHITE);

		//instantiating p2
		int p2w=20, p2h=100, p2speed=p1speed;
		RectangleShape p2 = new RectangleShape(new Vector2f(p2w, p2h));
		p2.setPosition(width-p2.getSize().x, (height/2)-(p1.getSize().y/2));
		p2.setFillColor(Color.WHITE);

		//instantiating ball
		float ballsize=10, ballspeed= 0.1f;
		CircleShape ball = new CircleShape(ballsize);
		ball.setPosition((width/2)-(ballsize/2), (height/2)-(ballsize/2));
		ball.setFillColor(Color.WHITE);
		
		//instantiating score
		Font font = new Font();
		try
		{
			font.loadFromFile(Paths.get("C:/Windows/Fonts/comic.ttf"));
		}
		catch(IOException ex){ex.printStackTrace();}
		Text score = new Text(p1_score + "-" + p2_score, font, 60);
		String temp = p1_score + "-" + p2_score;
		score.setPosition((width/2)-(60*temp.length()/4), 0);
		score.setColor(Color.WHITE);
		score.setStyle(TextStyle.REGULAR);
		score.setString(p1_score + " - " + p2_score);

		//main loop
		while(window.isOpen())
		{
			window.clear();
			for(Event event : window.pollEvents())
			{
				switch(event.type)
				{
				case CLOSED:
					window.close();
					break;
				case KEY_PRESSED:
					input(p1, p2, p1speed, p2speed);
					break;
				default:
					break;
				}
			}
			window.draw(p1);
			window.draw(p2);
			window.draw(ball);
			window.draw(score);
			ballUpdate(ball, p1, p2, ballspeed, score);
			window.display();
		}
	}

	//controls input
	public static void input(RectangleShape p1, RectangleShape p2, int p1speed, int p2speed)
	{
		if(Keyboard.isKeyPressed(Key.W))
		{
			if(p1.getPosition().y <= 0)
				p1.setPosition(p1.getPosition().x, 0);
			else
				p1.move(0, -p1speed);
		}
		else if(Keyboard.isKeyPressed(Key.S))
		{
			if(p1.getPosition().y >= 500)
				p1.setPosition(p1.getPosition().x, 500);
			else
				p1.move(0, p1speed);
		}

		if(Keyboard.isKeyPressed(Key.UP))
		{
			if(p2.getPosition().y <= 0)
				p2.setPosition(p2.getPosition().x, 0);
			else
				p2.move(0, -p2speed);
		}
		else if(Keyboard.isKeyPressed(Key.DOWN))
		{
			if(p2.getPosition().y >= 500)
				p2.setPosition(p2.getPosition().x, 500);
			else
				p2.move(0, p2speed);
		}
	}

	//ball updater
	public static void ballUpdate(CircleShape ball, RectangleShape p1, RectangleShape p2, float ballspeed, Text score)
	{
		//collision with p1
		if(ball.getPosition().x <= p1.getSize().x && ball.getPosition().y >= p1.getPosition().y && ball.getPosition().y <= p1.getPosition().y+p1.getSize().y)
		{
			right=true;
			left=false;
			ball.setPosition(p1.getSize().x, ball.getPosition().y);
		}
		
		//collision with p2
		if(ball.getPosition().x >= p2.getPosition().x-ball.getRadius()*2/2 && ball.getPosition().y >= p2.getPosition().y && ball.getPosition().y <= p2.getPosition().y+p2.getSize().y)
		{
			left=true;
			right=false;
			ball.setPosition(width-p2.getSize().x-ball.getRadius()*2, ball.getPosition().y);
		}
		
		//collision with ceiling and floor
		if(ball.getPosition().y <= 0 && up)
		{
			down=true;
			up=false;
			ball.move(0, ballspeed);
		}
		else if(ball.getPosition().y >= height-ball.getRadius()*2)
		{
			up=true;
			down=false;
			ball.move(0, -ballspeed);
		}
		
		//reset
		if(ball.getPosition().x <= -ball.getRadius()*2)
		{
			ball.setPosition((width/2)-(ball.getRadius()*2/2), (height/2)-(ball.getRadius()*2/2));
			p2_score++;
			ScoreBoard(score, p1_score, p2_score);
		}
		else if(ball.getPosition().x >= width)
		{
			ball.setPosition((width/2)-(ball.getRadius()*2/2), (height/2)-(ball.getRadius()*2/2));
			p1_score++;
			ScoreBoard(score, p1_score, p2_score);
		}
			
		if(left)
			ball.move(-ballspeed, 0);
		else if(right)
			ball.move(ballspeed, 0);
		if(up)
			ball.move(0, -ballspeed);
		else if(down)
			ball.move(0, ballspeed);
	}
	
	public static void ScoreBoard(Text score, int P1_Score, int P2_Score)
	{
		score.setString(P1_Score + " - " + P2_Score);	
	}
}
